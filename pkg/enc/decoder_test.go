package enc

import (
	"bytes"
	"encoding/json"
	"net"
	"reflect"
	"testing"

	"sip/pkg/sipmsg"

	"github.com/stretchr/testify/assert"
)

func Test_decoder_ReadMessage(t *testing.T) {
	tests := getTestCases()

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			d := NewDecoder(tt.conn)
			got, err := d.ReadMessage()
			if (err != nil) != tt.wantErr {
				t.Errorf("ReadMessage() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			gotBytes, err := json.Marshal(got)
			assert.Empty(t, err)
			wantBytes, err := json.Marshal(tt.want)
			assert.Empty(t, err)
			if !reflect.DeepEqual(gotBytes, wantBytes) {
				t.Errorf("ReadMessage() got = %v, want %v", got, tt.want)
			}
		})
	}
}

type testCase struct {
	name    string
	conn    net.Conn
	want    *sipmsg.GenericMessage
	wantErr bool
}

func getTestCases() []testCase {
	cases := make([]testCase, 0)
	cases = append(cases, getRegisterMsg())
	return cases
}

func getRegisterMsg() testCase {
	sipUri, _ := sipmsg.ParseSipUri("sip:127.0.0.1")
	return testCase{
		name: "decode register msg",
		conn: &fakeConn{
			buff: bytes.NewBuffer([]byte{0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x20, 0x73, 0x69, 0x70, 0x3a, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0xd, 0xa, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x61, 0x65, 0x65, 0x36, 0x34, 0x65, 0x36, 0x35, 0x64, 0x31, 0x61, 0x63, 0x30, 0x35, 0x30, 0x30, 0x64, 0x33, 0x34, 0x65, 0x36, 0x35, 0x37, 0x65, 0x65, 0x31, 0x32, 0x39, 0x62, 0x36, 0x31, 0x61, 0x40, 0x30, 0x3a, 0x30, 0x3a, 0x30, 0x3a, 0x30, 0x3a, 0x30, 0x3a, 0x30, 0x3a, 0x30, 0x3a, 0x30, 0xd, 0xa, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0xd, 0xa, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x40, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x32, 0x34, 0x64, 0x38, 0x66, 0x39, 0x64, 0x30, 0xd, 0xa, 0x54, 0x6f, 0x3a, 0x20, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x40, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3e, 0xd, 0xa, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x35, 0x30, 0x36, 0x30, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x2d, 0x33, 0x36, 0x33, 0x32, 0x33, 0x33, 0x2d, 0x64, 0x33, 0x62, 0x61, 0x63, 0x34, 0x33, 0x61, 0x33, 0x61, 0x62, 0x37, 0x66, 0x31, 0x30, 0x38, 0x34, 0x31, 0x32, 0x33, 0x35, 0x32, 0x32, 0x37, 0x65, 0x66, 0x32, 0x38, 0x35, 0x65, 0x38, 0x39, 0xd, 0xa, 0x4d, 0x61, 0x78, 0x2d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x37, 0x30, 0xd, 0xa, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4a, 0x69, 0x74, 0x73, 0x69, 0x32, 0x2e, 0x31, 0x30, 0x2e, 0x35, 0x35, 0x35, 0x30, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x31, 0x30, 0xd, 0xa, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x3a, 0x20, 0x36, 0x30, 0x30, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x40, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x35, 0x30, 0x36, 0x30, 0x3b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x3d, 0x75, 0x64, 0x70, 0x3b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x3d, 0x31, 0x32, 0x37, 0x5f, 0x30, 0x5f, 0x30, 0x5f, 0x31, 0x3e, 0x3b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x3d, 0x36, 0x30, 0x30, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0xd, 0xa, 0xd, 0xa}),
		},
		want: &sipmsg.GenericMessage{
			StartLine: &sipmsg.RequestLine{
				Method:     sipmsg.Register,
				RequestUri: sipUri,
				SipVersion: sipmsg.DefaultSipVersion,
			},
			MessageHeader: map[string]*sipmsg.HeaderFiledValue{
				"Call-ID": {
					FiledValue: []string{"aee64e65d1ac0500d34e657ee129b61a@0:0:0:0:0:0:0:0"},
				},
				"From": {
					FiledValue: []string{"\"123456\" <sip:123456@127.0.0.1>"},
					Params: map[string]string{
						"tag": "24d8f9d0",
					},
				},
				"To": {
					FiledValue: []string{"\"123456\" <sip:123456@127.0.0.1>"},
				},
				"Via": {
					FiledValue: []string{"SIP/2.0/UDP 127.0.0.1:5060"},
					Params: map[string]string{
						"branch": "z9hG4bK-363233-d3bac43a3ab7f10841235227ef285e89",
					},
				},

				"Max-Forwards": {
					FiledValue: []string{"70"},
				},
				"Contact": {
					FiledValue: []string{"\"123456\" <sip:123456@127.0.0.1:5060"},
					Params: map[string]string{
						"transport":       "udp",
						"registering_acc": "127_0_0_1>",
						"expires":         "600",
					},
				},
				"Content-Length": {
					FiledValue: []string{"0"},
				},
				"CSeq": {
					FiledValue: []string{"1 REGISTER"},
				},
				"User-Agent": {
					FiledValue: []string{"Jitsi2.10.5550Windows 10"},
				},
				"Expires": {
					FiledValue: []string{"600"},
				},
			},
			MessageBody: nil,
		},
		wantErr: false,
	}
}
